{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./src/components/slugify.js","webpack:///./src/components/Blog/BlogCard.js","webpack:///./src/components/common/SplitLayout.js","webpack:///./src/components/Blog/Tags.js","webpack:///./src/hooks/useRandomBlogPost.js","webpack:///./src/components/Blog/BlogLayout.js"],"names":["TagsPage","data","tag","pageContext","allMarkdownRemark","edges","totalCount","tagHeader","title","map","node","slug","fields","frontmatter","date","tags","key","id","readtime","timeToRead","excerpt","module","exports","str","match","x","toLowerCase","join","PostWrapper","styled","article","p","theme","dark","accentColor","primaryColor","shadowSmall","secondaryColor","BlogDateAndReadTime","style","fontSize","color","aria-label","icon","BlogCard","to","marginTop","slugify","SplitLayoutWrapper","section","spacing","sectionBottom","props","media","fablet","SplitLayout","content","aside","className","TagBreadcrumb","Link","Tags","useStaticQuery","overflow","group","fieldValue","randomGenerator","min","max","Math","floor","random","useRandomBlogPost","blogposts","randomPost","window","location","pathname","randomSlug","randomTitle","BlogLayout","children","sharerSection"],"mappings":"4FAAA,gFA2CeA,UAnCE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACVC,EADkC,EAAlBC,YAChBD,IACR,EAA8BD,EAAKG,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WAETC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEJ,EAFF,IAIf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKM,MAAOD,EAAY,oBAExB,kBAAC,IAAD,KACE,4BAAKA,GACL,6BACA,6BACCF,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACR,EAA8BD,EAAKG,YAA3BL,EAAR,EAAQA,MAAOM,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,KACrB,OACE,kBAAC,IAAD,CACEA,KAAMA,EACNC,IAAKN,EAAKO,GACVN,KAAMA,EACNH,MAAOA,EACPM,KAAMA,EACNI,SAAUR,EAAKS,WACfC,QAASV,EAAKU,iB,mBC5B5BC,EAAOC,QAPS,SAAAC,GAAG,OACjBA,GACAA,EACGC,MAAM,sEACNf,KAAI,SAAAgB,GAAC,OAAIA,EAAEC,iBACXC,KAAK,O,kCCLV,yIAUMC,EAAcC,IAAOC,QAAV,2EAAGD,CAAH,wNAMX,SAAAE,GAAC,OAAKA,EAAEC,MAAMC,KAAOF,EAAEC,MAAME,YAAcH,EAAEC,MAAMG,gBAEzC,SAAAJ,GAAC,OAAIA,EAAEC,MAAMI,eACP,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,kBAYtBC,EAAsB,SAAC,GAAD,IAAGxB,EAAH,EAAGA,KAAMI,EAAT,EAASA,SAAT,OACjC,0BAAMqB,MAAO,CAAEC,SAAU,GAAIC,MAAO,SAClC,0BAAMC,aAAA,gBAA4B5B,GAChC,kBAAC,IAAD,CAAiB2B,MAAM,OAAOE,KAAK,iBADrC,KAEe7B,GAHjB,MAME,0BAAM4B,aAAexB,EAAf,iBACJ,kBAAC,IAAD,CAAiBuB,MAAM,OAAOE,KAAK,UADrC,KAEezB,EAFf,cA6CW0B,IAtCE,SAAC,GAAoD,IAAlD9B,EAAiD,EAAjDA,KAAMI,EAA2C,EAA3CA,SAAUV,EAAiC,EAAjCA,MAAOY,EAA0B,EAA1BA,QAAST,EAAiB,EAAjBA,KAAMI,EAAW,EAAXA,KACxD,OACE,kBAAC,IAAD,CAAM8B,GAAIlC,EAAM+B,aAAelC,EAAf,gBAAoCU,EAApC,YACd,kBAACU,EAAD,KACE,kBAACU,EAAD,CAAqBxB,KAAMA,EAAMI,SAAUA,IAE3C,4BAAKV,GACL,2BAAIY,GAEJ,yBAAKmB,MAAO,CAAEO,UAAW,KACtB/B,EAAKN,KAAI,SAAAP,GAAG,OACX,kBAAC,IAAD,CACEc,IAAKd,EACLwC,aAAexC,EAAf,OACA2C,GAAE,cAAgBE,IAAQ7C,GAAxB,KAEDA,W,kCC7Df,yBAKM8C,EALN,UAK2BnB,EAAOoB,QAAV,qFAAGpB,CAAH,uYACpB,SAAAE,GAAC,OAAIA,EAAEC,MAAMkB,QAAQC,iBAkBd,SAAAC,GAAK,OAAIA,EAAMpB,MAAMqB,MAAMC,UA+BvBC,IAdK,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,MAAZ,OAClB,kBAACT,EAAD,KACE,6BAASU,UAAU,mBAAmBF,GAAWA,GACjD,6BAASE,UAAU,iBACjB,2BAAOA,UAAU,iBAAiBD,GAASA,O,kCC7CjD,wGAoBaE,EAAgB9B,YAAO+B,QAAV,yEAAG/B,CAAH,uJAEJ,SAAAE,GAAC,OAAKA,EAAEC,MAAMC,KAAOF,EAAEC,MAAMG,aAAe,aAQhD,SAAAJ,GAAC,OAAKA,EAAEC,MAAMC,KAAOF,EAAEC,MAAMG,aAAe,aACjD,SAAAJ,GAAC,OAAKA,EAAEC,MAAMC,KAAO,UAAY,aAsB/B4B,IAlBF,WACX,IAAM9C,EA9BO+C,yBAAe,aAgC5B,OACE,6BAASvB,MAAO,CAAEwB,SAAU,SACzBhD,EAAKX,kBAAkB4D,MAAMvD,KAAI,SAAAP,GAAG,OACnC,kBAACyD,EAAD,CACE3C,IAAKd,EAAI+D,WACTpB,GAAE,cAAgBE,IAAQ7C,EAAI+D,YAA5B,IACFvB,aAAexC,EAAII,WAAnB,sBAAmDJ,EAAI+D,YAEtD/D,EAAI+D,WALP,KAKqB/D,EAAII,kB,oHC5CpB4D,EAAkB,SAACC,EAAKC,GACnC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GA8CxCK,EA3CW,WACxB,IAAMC,EAAYX,yBAAe,cAoB7BY,EACFD,EAAUrE,kBAAkBC,MAC1B6D,EAAgB,EAAGO,EAAUrE,kBAAkBE,WAAa,IAIhE,GAAsB,oBAAXqE,OACT,KAAOD,EAAWhE,KAAKE,OAAOD,OAASgE,OAAOC,SAASC,UAAU,CAC/DH,EACED,EAAUrE,kBAAkBC,MAC1B6D,EAAgB,EAAGO,EAAUrE,kBAAkBE,WAAa,IAGhE,MAIJ,MAAO,CACLwE,WAAYJ,EAAWhE,KAAKE,OAAOD,KACnCoE,YAAaL,EAAWhE,KAAKG,YAAYL,QCJ9BwE,IAjCI,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAC9B,EAAoCV,IAA5BM,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAEpB,OACE,kBAACxB,EAAA,EAAD,CACEC,QAASyB,EACTxB,MACE,oCACE,iCACE,2CACA,kBAAC,IAAD,CAAMlB,MAAO,CAAEC,SAAU,QAAUK,GAAIiC,GACpCC,GAEH,6BACA,8BAEF,iCACE,oCACA,kBAAClB,EAAA,EAAD,MACA,8BAEDqB,GAAiBA","file":"component---src-templates-tags-js-2fe7e9ac046603574de3.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport SEO from '@components/seo';\nimport Layout from '@components/Layout/Layout';\nimport BlogCard from '@components/Blog/BlogCard';\nimport BlogLayout from '@components/Blog/BlogLayout';\n\nconst TagsPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`;\n\n  return (\n    <Layout>\n      <SEO title={tagHeader + ' | Anurag Hazra'} />\n\n      <BlogLayout>\n        <h1>{tagHeader}</h1>\n        <br />\n        <br />\n        {edges.map(({ node }) => {\n          const { slug } = node.fields;\n          const { title, date, tags } = node.frontmatter;\n          return (\n            <BlogCard\n              tags={tags}\n              key={node.id}\n              slug={slug}\n              title={title}\n              date={date}\n              readtime={node.timeToRead}\n              excerpt={node.excerpt}\n            />\n          );\n        })}\n      </BlogLayout>\n    </Layout>\n  );\n};\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            tags\n            title\n            date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\n          }\n        }\n      }\n    }\n  }\n`;\n","const slugify = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('-');\n\nmodule.exports = slugify;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Link from 'gatsby-link';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { TagBreadcrumb } from './Tags';\nimport slugify from '@components/slugify';\n\nconst PostWrapper = styled.article`\n  overflow: auto;\n  margin-bottom: 70px;\n  /* margin-top: 100px; */\n  padding: 30px 30px;\n  border-top: 5px solid\n    ${p => (p.theme.dark ? p.theme.accentColor : p.theme.primaryColor)};\n  border-radius: 10px;\n  box-shadow: ${p => p.theme.shadowSmall};\n  background-color: ${p => p.theme.secondaryColor};\n\n  &:hover {\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\n  }\n\n  span {\n    font-size: 13px;\n    color: gray;\n  }\n`;\n\nexport const BlogDateAndReadTime = ({ date, readtime }) => (\n  <span style={{ fontSize: 13, color: 'gray' }}>\n    <span aria-label={`publish date ${date}`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />\n      &nbsp;&nbsp;{date}\n    </span>\n    &nbsp;&nbsp;&nbsp;\n    <span aria-label={`${readtime} minutes read`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"clock\" />\n      &nbsp;&nbsp;{readtime}min read\n    </span>\n  </span>\n);\n\nconst BlogCard = ({ date, readtime, title, excerpt, slug, tags }) => {\n  return (\n    <Link to={slug} aria-label={`${title} - read time ${readtime} minutes`}>\n      <PostWrapper>\n        <BlogDateAndReadTime date={date} readtime={readtime} />\n\n        <h2>{title}</h2>\n        <p>{excerpt}</p>\n\n        <div style={{ marginTop: 20 }}>\n          {tags.map(tag => (\n            <TagBreadcrumb\n              key={tag}\n              aria-label={`${tag} tag`}\n              to={`/blog/tags/${slugify(tag)}/`}\n            >\n              {tag}\n            </TagBreadcrumb>\n          ))}\n        </div>\n      </PostWrapper>\n    </Link>\n  );\n};\n\nBlogDateAndReadTime.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired,\n};\n\nBlogCard.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  tags: PropTypes.array.isRequired,\n};\nexport default BlogCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nconst SplitLayoutWrapper = styled.section`\n  ${p => p.theme.spacing.sectionBottom};\n\n  & article:first-of-type {\n    margin-top: 15px;\n  }\n\n  display: grid;\n  grid-template-columns: minmax(750px, 1fr) 1fr;\n  grid-column-gap: 30px;\n  grid-template-areas: 'post side';\n\n  .layout__content {\n    grid-area: post;\n  }\n  .layout__aside {\n    grid-area: side;\n  }\n\n  @media ${props => props.theme.media.fablet} {\n    /* setting g-t-c to 1fr 1fr because in mobile \n    version minmax was breaking the layout */\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 0px;\n    grid-row-gap: 30px;\n    grid-template-areas:\n      'post post'\n      'side side';\n  }\n\n  .sticky__aside {\n    position: sticky;\n    top: 100px;\n  }\n`;\n\nconst SplitLayout = ({ content, aside }) => (\n  <SplitLayoutWrapper>\n    <section className=\"layout__content\">{content && content}</section>\n    <section className=\"layout__aside\">\n      <aside className=\"sticky__aside\">{aside && aside}</aside>\n    </section>\n  </SplitLayoutWrapper>\n);\n\nSplitLayout.propTypes = {\n  content: PropTypes.node.isRequired,\n  aside: PropTypes.node.isRequired,\n};\n\nexport default SplitLayout;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link, graphql, useStaticQuery } from 'gatsby';\nimport slugify from '@components/slugify';\n\nexport const useTags = () => {\n  const tags = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 2000) {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `);\n\n  return tags;\n};\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 10px;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\n    color: ${p => (p.theme.dark ? '#d9e0ff' : '#6D83F2')};\n  }\n`;\n\nconst Tags = () => {\n  const tags = useTags();\n\n  return (\n    <section style={{ overflow: 'auto' }}>\n      {tags.allMarkdownRemark.group.map(tag => (\n        <TagBreadcrumb\n          key={tag.fieldValue}\n          to={`/blog/tags/${slugify(tag.fieldValue)}/`}\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n        >\n          {tag.fieldValue}, {tag.totalCount}\n        </TagBreadcrumb>\n      ))}\n    </section>\n  );\n};\n\nexport default Tags;\n","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const randomGenerator = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst useRandomBlogPost = () => {\n  const blogposts = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(filter: { fields: { posttype: { eq: \"blog\" } } }) {\n          edges {\n            node {\n              frontmatter {\n                title\n              }\n              fields {\n                slug\n              }\n            }\n          }\n          totalCount\n        }\n      }\n    `\n  );\n\n  let randomPost =\n    blogposts.allMarkdownRemark.edges[\n      randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\n    ];\n\n  // make sure we don't have redundant randomPost\n  if (typeof window !== 'undefined') {\n    while (randomPost.node.fields.slug === window.location.pathname) {\n      randomPost =\n        blogposts.allMarkdownRemark.edges[\n          randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\n        ];\n      // don't wanna run it second time\n      break;\n    }\n  }\n\n  return {\n    randomSlug: randomPost.node.fields.slug,\n    randomTitle: randomPost.node.frontmatter.title,\n  };\n};\nexport default useRandomBlogPost;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport Link from 'gatsby-link';\n\nimport Tags from '@components/Blog/Tags';\nimport SplitLayout from '@common/SplitLayout';\nimport useRandomBlogPost from '@src/hooks/useRandomBlogPost';\n\nconst BlogLayout = ({ children, sharerSection }) => {\n  const { randomSlug, randomTitle } = useRandomBlogPost();\n\n  return (\n    <SplitLayout\n      content={children}\n      aside={\n        <>\n          <section>\n            <h4>Random post</h4>\n            <Link style={{ fontSize: '16px' }} to={randomSlug}>\n              {randomTitle}\n            </Link>\n            <br />\n            <br />\n          </section>\n          <section>\n            <h4>Tags</h4>\n            <Tags />\n            <br />\n          </section>\n          {sharerSection && sharerSection}\n        </>\n      }\n    />\n  );\n};\n\nBlogLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  sharerSection: PropTypes.node,\n};\n\nexport default BlogLayout;\n"],"sourceRoot":""}