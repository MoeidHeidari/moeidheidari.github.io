{"version":3,"sources":["webpack:///./src/components/slugify.js","webpack:///./src/components/Blog/BlogCard.js","webpack:///./src/components/common/SplitLayout.js","webpack:///./src/components/Blog/Tags.js","webpack:///./src/hooks/useRandomBlogPost.js","webpack:///./src/components/Blog/BlogLayout.js","webpack:///./src/pages/blog.js"],"names":["module","exports","str","match","map","x","toLowerCase","join","PostWrapper","styled","article","p","theme","shadowSmall","secondaryColor","BlogDateAndReadTime","date","readtime","style","fontSize","color","aria-label","icon","BlogCard","title","excerpt","slug","tags","to","marginTop","tag","key","slugify","SplitLayoutWrapper","section","spacing","sectionBottom","props","media","fablet","SplitLayout","aside","content","className","TagBreadcrumb","Link","dark","primaryColor","Tags","useStaticQuery","overflow","allMarkdownRemark","group","fieldValue","totalCount","randomGenerator","min","max","Math","floor","random","useRandomBlogPost","blogposts","randomPost","edges","window","node","fields","location","pathname","randomSlug","randomTitle","frontmatter","BlogLayout","children","sharerSection","class","BlogPage","id","timeToRead"],"mappings":"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","file":"component---src-pages-blog-js-17380ab1153db8cd96ec.js","sourcesContent":["const slugify = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('-');\n\nmodule.exports = slugify;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Link from 'gatsby-link';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { TagBreadcrumb } from './Tags';\nimport slugify from '@components/slugify';\n\nconst PostWrapper = styled.article`\n  overflow: auto;\n  margin-bottom: 70px;\n  /* margin-top: 100px; */\n  padding: 30px 30px;\n\n  border-radius: 10px;\n  box-shadow: ${p => p.theme.shadowSmall};\n  background-color: ${p => p.theme.secondaryColor};\n\n  &:hover {\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\n  }\n\n  span {\n    font-size: 13px;\n    color: gray;\n  }\n`;\n\nexport const BlogDateAndReadTime = ({ date, readtime }) => (\n  <span style={{ fontSize: 13, color: 'gray' }}>\n    <span aria-label={`publish date ${date}`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />\n      &nbsp;&nbsp;{date}\n    </span>\n    &nbsp;&nbsp;&nbsp;\n    <span aria-label={`${readtime} minutes read`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"clock\" />\n      &nbsp;&nbsp;{readtime}min read\n    </span>\n  </span>\n);\n\nconst BlogCard = ({ date, readtime, title, excerpt, slug, tags }) => {\n  return (\n    <Link to={slug} aria-label={`${title} - read time ${readtime} minutes`}>\n      <PostWrapper>\n        <BlogDateAndReadTime date={date} readtime={readtime} />\n\n        <h2>{title}</h2>\n        <p>{excerpt}</p>\n\n        <div style={{ marginTop: 20 }}>\n          {tags.map(tag => (\n            <TagBreadcrumb\n              key={tag}\n              aria-label={`${tag} tag`}\n              to={`/blog/tags/${slugify(tag)}/`}\n            >\n              {tag}\n            </TagBreadcrumb>\n          ))}\n        </div>\n      </PostWrapper>\n    </Link>\n  );\n};\n\nBlogDateAndReadTime.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired,\n};\n\nBlogCard.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  tags: PropTypes.array.isRequired,\n};\nexport default BlogCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nconst SplitLayoutWrapper = styled.section`\n  ${p => p.theme.spacing.sectionBottom};\n\n  & article:first-of-type {\n    margin-top: 15px;\n  }\n\n  display: grid;\n  grid-template-columns: minmax(900px, 1fr) 1fr;\n  grid-column-gap: 70px;\n  grid-template-areas: 'post side';\n\n  .layout__content {\n    grid-area: side;\n  }\n  .layout__aside {\n\n    grid-area: post ;\n  }\n\n  @media ${props => props.theme.media.fablet} {\n    /* setting g-t-c to 1fr 1fr because in mobile \n    version minmax was breaking the layout */\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 0px;\n    grid-row-gap: 50px;\n    grid-template-areas:\n      'post post'\n      'side side';\n  }\n\n  .sticky__aside {\n    position: sticky;\n    top: 100px;\n  }\n`;\n\nconst SplitLayout = ({ aside, content }) => (\n  <SplitLayoutWrapper>\n     <section className=\"layout__aside\">\n      <aside className=\"sticky__aside\">{aside && aside}</aside>\n    </section>\n    <section className=\"layout__content\">{content && content}</section>\n   \n  </SplitLayoutWrapper>\n);\n\nSplitLayout.propTypes = {\n  content: PropTypes.node.isRequired,\n  aside: PropTypes.node.isRequired,\n};\n\nexport default SplitLayout;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link, graphql, useStaticQuery } from 'gatsby';\nimport slugify from '@components/slugify';\n\nexport const useTags = () => {\n  const tags = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 2000) {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `);\n\n  return tags;\n};\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 10px;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\n    color: ${p => (p.theme.dark ? '#d9e0ff' : '#6D83F2')};\n  }\n`;\n\nconst Tags = () => {\n  const tags = useTags();\n\n  return (\n    <section style={{ overflow: 'auto' }}>\n      {tags.allMarkdownRemark.group.map(tag => (\n        <TagBreadcrumb\n          key={tag.fieldValue}\n          to={`/blog/tags/${slugify(tag.fieldValue)}/`}\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n        >\n          {tag.fieldValue}, {tag.totalCount}\n        </TagBreadcrumb>\n      ))}\n    </section>\n  );\n};\n\nexport default Tags;\n","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const randomGenerator = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst useRandomBlogPost = () => {\n  const blogposts = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(filter: { fields: { posttype: { eq: \"blog\" } } }) {\n          edges {\n            node {\n              frontmatter {\n                title\n              }\n              fields {\n                slug\n              }\n            }\n          }\n          totalCount\n        }\n      }\n    `\n  );\n\n  let randomPost =\n    blogposts.allMarkdownRemark.edges[\n      randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\n    ];\n\n  // make sure we don't have redundant randomPost\n  if (typeof window !== 'undefined') {\n    while (randomPost.node.fields.slug === window.location.pathname) {\n      randomPost =\n        blogposts.allMarkdownRemark.edges[\n          randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\n        ];\n      // don't wanna run it second time\n      break;\n    }\n  }\n\n  return {\n    randomSlug: randomPost.node.fields.slug,\n    randomTitle: randomPost.node.frontmatter.title,\n  };\n};\nexport default useRandomBlogPost;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport Link from 'gatsby-link';\n\nimport Tags from '@components/Blog/Tags';\nimport SplitLayout from '@common/SplitLayout';\nimport useRandomBlogPost from '@src/hooks/useRandomBlogPost';\n\nconst BlogLayout = ({ children, sharerSection }) => {\n  const { randomSlug, randomTitle } = useRandomBlogPost();\n\n  return (\n\n\n    <div class=\"container\">\n       <div class=\"row\">\n       <section>\n            <h4>Random post</h4>\n            <Link style={{ fontSize: '16px' }} to={randomSlug}>\n              {randomTitle}\n            </Link>\n            <br />\n            <br />\n          </section>\n          <section>\n            <h4>Tags</h4>\n            <Tags />\n            <br />\n          </section>\n          {sharerSection && sharerSection}\n       </div>\n       <div class=\"row\">\n       {children}\n       </div>\n    </div>\n\n    // <SplitLayout\n     \n    \n\n    //   aside={\n    //     <>\n          // <section>\n          //   <h4>Random post</h4>\n          //   <Link style={{ fontSize: '16px' }} to={randomSlug}>\n          //     {randomTitle}\n          //   </Link>\n          //   <br />\n          //   <br />\n          // </section>\n          // <section>\n          //   <h4>Tags</h4>\n          //   <Tags />\n          //   <br />\n          // </section>\n          // {sharerSection && sharerSection}\n    //     </>\n    //   }\n    //   content={children}\n    // />\n  );\n};\n\nBlogLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  sharerSection: PropTypes.node,\n};\n\nexport default BlogLayout;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Layout from '@components/Layout/Layout';\nimport SEO from '@components/seo';\n\nimport BlogCard from '@components/Blog/BlogCard';\nimport BlogLayout from '@components/Blog/BlogLayout';\n\nconst BlogPage = () => {\n  const blogposts = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(\n          filter: { fields: { posttype: { eq: \"blog\" } } }\n          sort: { fields: frontmatter___date, order: DESC }\n        ) {\n          edges {\n            node {\n              id\n              excerpt\n              timeToRead\n              frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\n                tags\n              }\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n  return (\n    <Layout>\n      <SEO title=\"Blog | Moeid Heidari\" />\n\n      <BlogLayout>\n        {blogposts.allMarkdownRemark.edges.map(({ node }) => (\n          <BlogCard\n            key={node.id}\n            slug={node.fields.slug}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            tags={node.frontmatter.tags}\n            readtime={node.timeToRead}\n            excerpt={node.excerpt}\n          />\n        ))}\n      </BlogLayout>\n    </Layout>\n  );\n};\n\nexport default BlogPage;\n"],"sourceRoot":""}